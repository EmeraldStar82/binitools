\input texinfo    @c -*-texinfo-*-
@c %**start of header
@setfilename binitools.info
@include version.texi
@settitle The binitools and BINI Format Guide
@c %**end of header

@copying
This manual for for binitools, version @value{VERSION}, as well as
information about the BINI format.

Copyright @copyright{} 2007 Christopher Wellons
<@email{ccw129@@psu.edu}>.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@titlepage
@title The binitools and BINI Format Guide
@subtitle for binitools version @value{VERSION}, @value{UPDATED}
@author Christopher Wellons (@email{ccw129@@psu.edu})

@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@contents

@ifnottex
@node Top
@top binitools

@insertcopying
@end ifnottex

@menu
* Preface::          An introduction
* Using unbini::     Unpacking BINI files.
* Using bini::       Repcking BINI files.
* Tips and Tricks::  Useful binitools tricks.
* The BINI Format::  Detailed information on the BINI format.
* Index::            Complete index.
@end menu

@c Preface
@node Preface
@chapter Preface
@cindex preface

@cindex free software
Before these binitools were created, several programs already existed
for editing and manipulating BINI files. However, none of these tools
are @url{http://www.fsf.org/licensing/essays/free-sw.html , , free
software}. Additionally, none of the tools that would convert between
BINI and text could do so reliably and correctly.

The purpose of the binitools project is to create free software tools
that are capable of converting any possible BINI to text and back with
complete accuracy. Every release is tested against 1233 different BINI
files for correctness.

Note that these tools are meant to be used in conjunction with one
another. Do not mix these tools with any other text to BINI
converters. These BINI tools are the only known tools that can convert
back and forth from text format without error.

What makes these tools different is the use of quotes. All string
values, including entry and section names, are wrapped in quotes. This
makes the text version of a BINI file equally as expressive as a BINI
file. A BINI file represents unique text file and vice versa.

The @command{bini} tool for converting a text file into a BINI file
works on the same conventions as a compiler. It uses a scanner and
parser and even has its own grammar. This allows the text files to be
flexible and have accurate error reporting when there is a formatting
mistake.

@c The unbini usage chapter.
@node Using unbini
@chapter Using unbini
@cindex unbini

@menu
* unbini Basic Operation:: Basic usage of unbini.
* Output Format::          The unbini output format.
* Special Output::         Producing compatible output.
* unbini BINI Analysis::   Options for inspecting BINI files.
* unbini Quick Help::      Extra help information.
@end menu

@node unbini Basic Operation
@section Basic Operation

@cindex unpack
@cindex text editor
@cindex editor, text
The BINI file format stores data in a format that can more easily be
read by a computer. To edit a BINI file, it must first be
@dfn{unpacked} into a text file to be edited by a text editor. The
@command{unbini} tool can unpack the BINI file for this purpose.

@cindex concatenate
@cindex arguments
@command{unbini} accepts any number of files as arguments. Each file
is processed separately and converted into its own output file. This
behavior changes with the @option{-c} flag. All input files are
concatenated into a single output file, which must be specified with
the @option{-o} option.

@cindex drag and drop
@cindex Windows
If you are on the Windows platform, you can easily convert many files
with drag-and-drop.  by selecting all the files you want to
convert. You can achieve this effect in Windows by dragging and
dropping any files you want converted onto the executable files.

@cindex output
The output file is determined by appending @file{.txt} to the input
file. 

For example,

@example
  unbini market_commodities.ini effects_explosion.ini
@end example

The unpacked output files will be @file{market_commodities.ini.txt}
and @file{effects_explosion.ini.txt}.

@cindex stdin
@cindex stdout
@cindex standard in
@cindex standard out
@cindex pipes
If an input file is supplied to with the name @file{-},
@command{unbini} will use standard input (@file{stdin}). If @file{-}
is supplied as an input file and no output file is specified (with the
@option{-o} option), or of @file{-} is specified as the output file,
ubini will use standard output @file{stdout} for producing output.

@node Output Format
@section Output Format

The text output from @command{unbini} version looks like this,

@example
["Section Title"]
"entry name" = 1, -1, 1.0, -1.0, "a string"
"empty entry"
"third entry" = "C:\\freelancer\\freelancer.exe"

["An Empty Section"]
@end example

@cindex quotes
@cindex quoted values
@cindex backslash
@cindex escaped characters
Every string value, including section and entry names, must be
contained in quotes. Quotes and backslashes inside the quotes must be
escaped with a backslash.

@example
"A \"quoted\" word and a backslash: \\."
@end example

will be interpreted as,

@example
A "quoted" word and a backslash \.
@end example

All other characters, including a new line character, are legal inside
the quotes.

Why all these quotes? This gaurantees that the BINI file and the text
file are equally expressive and that there is a one-to-one mapping of
any possible BINI file to a unique text version.

@cindex whitespace
All non-quoted whitespace is ignored, so you can freely add space and
empty lines and such as much as you want. This makes the text version
of a BINI file very flexible.

@cindex number
@cindex integer
@cindex float
@cindex double
@cindex value
There are two types of numbers: integers and floating points. Integers
are signed and have no decimal component. Floating points are any
signed number with a decimal. 

@cindex comments
You can also comment your text file with a # character. Comments are
not encoded into the BINI file in any way. This means unpacking your
own BINI files will not recover any comments.

For example,

@example
["Section"]  # This is a comment
"entry" = 10 # This is another comment

# a comment for a group of entries:
"entry1"
"entry2" = "some value" 
@end example

@node Special Output
@section Special Output

@cindex compatibility
In order to operate with other tools who want to read plain text
files, unbini has a @option{-w} option which will produce output that
other programs will recognize. However, this file will not be readable
by @command{bini}, which repacks the text file into the BINI format.
This is because this output file is ambiguous (it can represent many
possible, different BINI files). @emph{Do not} edit files produced
with the @option{-w} option and expect to repack the file with these
tools.

@node unbini BINI Analysis
@section unbini BINI Analysis
@cindex analysis

There are two options for analysing a BINI file using
@command{unbini}. The first is the summary option, @option{-s}. After
all processing is complete, a summary of the number of sections,
entries, and values.

Here is the summary of @file{simple.ini}, which is included in the
source distribution.
@example
Sections : 4
Entries  : 13
Values   : 20
  int    : 6
  float  : 2
  string : 12
@end example

The second option is a listing of the string table, @option{-t}. The
elements are printed at one per line in the same order they are stored
in the BINI file.

Here is the string table for @file{simple.ini},
@example
Sec tion
numbers
Spaced Entry
space->    <-space
more->   <-space
break
==================
empty

Abc
[hard=section]
expression
0* + 1
:
colon_entry
121234
number_entry
equals_val
= assignment
filename
C:\freelancer\freelancer.exe
backslash
This is a backslash: \
empty section
lastsection
empty entry
entry
-value
-----------------
@end example

@node unbini Quick Help
@section unbini Quick Help

@cindex help
@cindex extra documentation
To view all of the options presented here, you can use the @option{-h}
option,

@example
Usage: unbini [options] FILES

Options:

        -o file      Set output file
        -t           Print string table
        -s           Summarize file details
        -n           Do not output a file
        -v           Verbose mode
        -w           Standard INI output (no string quotes)
        -c           Concatenate input files (requires -o option)
        -q           Don't print message at startup
        -h           Print this usage text
@end example

The @command{man} page contains slightly more detailed information
than the @option{-h} option produces.

@c The bini usage chapter.
@node Using bini
@chapter Using bini
@cindex bini

@menu
* bini Basic Operation::  Basic usage of bini.
* bini BINI Analysis::    Options for inspecting BINI files.
* bini Quick Help::       Extra help information.
@end menu

@node bini Basic Operation
@section bini Basic Operation

@cindex pack
@command{bini} @dfn{packs} a text file produced by @command{unbini}
into a binary BINI file. @command{bini} works very similarly to
@command{unbini} in that it accepts any number of input files and
produces a unique output file for each.

@cindex filename
@cindex backup
When packing files with @command{bini}, the @file{.txt} extention is
removed. If there is no @file{.txt} extension, @file{.ini} is
concatentaed instead. If a file with a matching filename already
exists, that file is backed up by appending @file{.bak} to the
original file's name. If a backup already exists no backup is made.

This backup system allows you to edit an original BINI file without
ever having to worry about makeing an original backup. The original is
backed up and no further backups are made.

@node bini BINI Analysis
@section bini BINI Analysis
@cindex analysis

There are two options for analysing a BINI file using
@command{bini}. The first is the summary option, @option{-s}. After
all processing is complete, a summary of the number of sections,
entries, and values.

Here is the summary of @file{simple.ini}, which is included in the
source distribution.
@example
Sections : 4
Entries  : 13
Values   : 20
  int    : 6
  float  : 2
  string : 12
@end example

The second option is a listing of the string table, @option{-t}. The
elements are printed at one per line in the same order they are stored
in the BINI file.

Here is the string table for @file{simple.ini},
@example
Sec tion
numbers
Spaced Entry
space->    <-space
more->   <-space
break
==================
empty

Abc
[hard=section]
expression
0* + 1
:
colon_entry
121234
number_entry
equals_val
= assignment
filename
C:\freelancer\freelancer.exe
backslash
This is a backslash: \
empty section
lastsection
empty entry
entry
-value
-----------------
@end example

@node bini Quick Help
@section bini Quick Help

The @option{-h} flag will give basic usage information,

@example
Usage: bini [options] FILES

Options:

        -o file      Set output file
        -s           Summarize file details
        -t           Print string table
        -n           Do not output a file
        -v           Verbose mode
        -c           Concatenate input files
        -q           Don't print message at startup
        -h           Print this usage text
@end example

The @command{man} page contains slightly more detailed information
than the @option{-h} option produces.

@c Tips and Tricks
@node Tips and Tricks
@chapter Tips and Tricks
@cindex tricks
@cindex tips

@c The BINI Format
@node The BINI Format
@chapter The BINI Format
@cindex format

A BINI file has two segments: a @dfn{data segment} and a @dfn{string
segment}, which contains the string table.

@verbatim
+------------+
|            |
|            |
|    data    |
|            |
|            |
|            |
|            |
|            |
|            |
|------------|
|            |
|            |
|   string   |
|    table   |
|            |
|            |
|            |
+------------+
@end verbatim

The @dfn{string table} is an @code{argz} vector: a contiguous block of
memory with strings separated by null-characters (/0). The data
section points to these strings. All values are stored as little
endian.

A BINI file begins with a 12-byte header made up of 3 4-byte segments,

@verbatim
header {
  dword "BINI"
  dword version
  dword str_table
}
@end verbatim

The first 4 bytes identify the file as a BINI file with those exact 4
ASCII letters. The second 4 bytes are always equal to the number
1. This is believed to be a version number. The last 4 bytes is the
string table offset from the beginning of the file.

The first 4 bytes after the header is the first section. A section
contains two 2-byte values,

@verbatim
section {
  word string_offset
  word number_of_entries
}
@end verbatim

The string offset is the offset from the beginning of the string
table. This string is the name of that section. The second word is the
number of entries in this section. Note that the number of sections is
not listed anywhere, so this information can only be found by
iterating though the entire data segment.

Following this section information is a 3-byte entry,

@verbatim
entry {
  word string_offset
  byte number of values
}
@end verbatim

This is data is setup just like sections with the string offset being
the name of the entry, and following it is the same number of values
as indicated,

@verbatim
value {
  byte  type
  dword data
}
@end verbatim

A value is 5 bytes. The first byte describes the type, of which there
are three,

@example
1 - integer
2 - float
3 - a string table offset
@end example

The data dword is of the indicated type. The next entry after all of
the values for this entry, the next entry (if there is one). After the
last entry, we may either find ourselves at the string table, meaning
that the parsing is complete, or we are at another new section, and we
start over again.

The code in unbini.c should be fairly straight forward following these
instructions.

The memory pool allows unbini to free all memory between parsing each
file. A memory pool works by allocating a large chunk of memory ahead
of time and handing off bits of it as needed. Its function is twofold:
we can easily free all the memory we have used by freeing the pool
itself. Second, its faster than calling malloc() many times because
malloc() is a system call. This is important in bini because it is
building a parse tree and needs to allocate small chunks of memory
from the heap very quickly.

@c End the manual with the index.
@node Index
@unnumbered Index

@printindex cp   

@bye
