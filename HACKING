binitools Development Information

If you want to modify or fix these BINI tools, this is the place to
look. There are two tools to worry about: bini and unbini. 

Before I go any further, let me describe what you will need to build
the tools. You can build the tools for Windows from any system with
mingw32. You should also be able to build the tools for your own
non-Windows system as well (such as on GNU/Linux with gcc).

To build these tools on a Windows system, you will want (need?) to
grab Cygwin (http://www.cygwin.com/) and install it on your
computer. Cygwin is totally free (speech and beer) and you should
definitely use it if you aren't already. It turns a crummy Windows
system into a more manageable POSIX environment with all the nice GNU
tools.

If you want to build the tools with either GNU/Linux and Cygwin, you
will need the following:

  gcc (or mingw32 for Windows builds)
  bison
  flex
  make

If you grabbed the source from the repository, you will need the GNU
auto tools (use "autoreconf -i" to set up the build environment).

  autoconf
  automake

And if you want to use the test script (test.sh) you will also want a
Bourne shell, such as bash.

When you supply no options to the configure script, it will build the
tools for your platform. In the case of cygwin, you will get cygwin
only executables. If you need Windows binaries, install the mingw32
compiler and run configure with (on cygwin):

  ./configure --host=mingw32

Normally, you can build everything with the normal configure, make:

  ./configure
  make

These BINI tools are meant to be used together, so be mindful of
changes made to either tool that may make it incompatible with the
other. To tests for compatibility problems, you can use the test tools
(described below).

A final note: this code will only work on a computer architectures
with little endian encoding, such as Intel x86 computers. Because
Freelancer is only avliable on these systems, there is little reason
to fix this. The BINI tools are useless on your Solaris workstation
and your PowerPC based Mac, even though you can build them there.

Now that you have the tools you need to build the project, here are
the relevant source files:

unbini source files:
 unbini.c
 pool.h
 pool.c

bini source files:
 parse.y
 scan.l
 convert.h
 convert.c
 pool.h
 pool.c

If you notice, pool.* shows up in both tools. This is a memory
allocation pool and is not specific to either tool in any way. In
fact, this pool may be useful in many other programs.

The source code uses these shorthand conventions:

sec -> section
val -> value

UNBINI
------

Let's begin with unbini because it is simpler. unbini is a bit
complicated due to the dual nature of file I/O. Originally, I wrote
the program to use mmap(). I generally develop code in Windows so I
didn't know that Windows is missing mmap(). I didn't want to toss out
mmap() because I liked it so much and it speeds up the program by 50%
compared to normal file I/O.

If you are building the tools with mingw32, you won't be using mmap(),
so you can safely ignore these parts of the code.

I will now describe the BINI format:

A BINI file has two sections: a data section and a string table.

+------------+
|            |
|            |
|    data    |
|            |
|            |
|            |
|            |
|            |
|            |
|------------|
|            |
|            |
|   string   |
|    table   |
|            |
|            |
|            |
+------------+

The string table is an argz vector: a contiguous block of memory with
strings separated by null-characters (/0). The data section points to
these strings.

A BINI file begins with a 12 byte header: 3 4-byte segments:

header {
  dword "BINI"
  dword version
  dword str_table
}

The first 4 bytes identify the file as a BINI file with those exact 4
ASCII letters. The second 4 bytes are always equal to the number
1. This is believed to be a version number. The last 4 bytes is the
string table offset from the beginning of the file.

The first 4 bytes after the header is the first section. A section
contains two 2-byte values:

section {
  word string_offset
  word number_of_entries
}

The string offset is the offset from the beginning of the string table
for the name of that section. The second word is the number of entries
in this section. Note that the number of sections is not listed
anywhere, so this information can only be found by iterating though
the entire data section.

Following this section information is a 3-byte entry:

entry {
  word string_offset
  byte number of values
}

This is just like the section, and following it is the same number of
values as indicated:

value {
  byte  type
  dword data
}

A value is 5 bytes. The first byte describes the type:

1 - integer
2 - float
3 - a string table offset

The data is then this indicated type of data. After all of the values
for this entry, we have the next entry (if there is one). After the
last entry, we may either find ourselves at the string table, meaning
that the parsing is complete, or we are at another new section, and we
start over again.

The code in unbini.c should be fairly straight forward following these
instructions.

The memory pool allows unbini to free all memory between parsing each
file. A memory pool works by allocating a large chunk of memory ahead
of time and handing off bits of it as needed. Its function is twofold:
we can easily free all the memory we have used by freeing the pool
itself. Second, its faster than calling malloc() many times because
malloc() is a system call. This is important in bini because it is
building a parse tree and needs to allocate small chunks of memory
from the heap very quickly.


BINI
----

I consider bini to be a bit more complicated because it uses an
attribute grammar to parse the files. This allows us to easily verify
the correctness of the text file and report errors when they are
found.

If you don't know anything about attribute grammars, don't
worry. There is little reason to change the grammar itself. The point
is that add_val(), add_entry(), and add_sec() are called to add a
value, entry, and section. Values are added before entries, which are
added before sections. This is because the parse tree is built from
the bottom up.

The parse tree is built using linked lists of linked lists. i.e. a
section structure contains information about that section and a linked
list of entries. Each entry structure contains info on that entry and
a linked list of values.

add_str() manages the string table. If we attempt to add a string that
already exists in the table, it will only return a reference to the
existing string and will not add to the table. The current
implementation is not terribly efficient, but will be improved in the
future.

TEST SUITE
----------

The build system has a built in test suite. Simply invoke make with
the check target to test against the supplied BINI file.

  make check

The supplied BINI file tests/simple.ini is a short BINI files that
contains many of the quirks of the Freelancer BINI files. You can list
any other files you would like to be tested in the tests/
directory. It is suggested that you copy all of the Freelancer BINI
files here. Doing this will allow them all to be checked when running
'make check'. When making a distribution (with 'make dist'), only
simple.ini will be included.

The actual script that does the testing is a bash script -
test.sh. This script follows these steps:

- unpacks the BINI file dumping out diagnostic info into temporary files
- repack the file, again saving diagnostic info
- unpacks the BINI and compares the diagnostic
- compares both unpacked versions
- compares files lengths of packed versions

The test will not report errors for differences in the order of
strings in the sting table. We don't want it to do this because the
string table can be rearranged and your BINI file is still valid (as
long as the data section is updated for the new string table).

STYLE
-----

The only thing there is to say about style is the use of indent. All
of the code that goes onto revision control is formated with GNU
indent, with one option: -npsl. For the lex and yacc files, I use
Emacs to filter the C code through indent. For all other files, you
can use use indent directly:

indent -npsl unbini.c

SECURITY
--------

Please try to stick with safe memory functions when doing your string
operations. For example, use snprintf() instead of sprintf() and
strncpy() instead of strcpy(). Without these, it may be possible for
someone to write a malicious BINI file that could execute virus code
when unpacked. A good way to check yourself is to build the program on
OpenBSD. The GNU compiler on OpenBSD does extra checks for these bad
memory functions.
